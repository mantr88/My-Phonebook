{"version":3,"file":"static/js/573.32db3bf6.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/ContactCard/ContactCard.jsx","redux/selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/AddContactModal/AddContactModal.jsx","Pages/Contacts.jsx","components/MainContainer/MainContainer.jsx"],"sourcesContent":["import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/operations';\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Box,\n  FormErrorMessage,\n  Icon,\n  Flex,\n} from '@chakra-ui/react';\nimport { GrUserAdd } from 'react-icons/gr';\nimport { BsTelephonePlus } from 'react-icons/bs';\n\nconst regExpForName =\n  /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\nconst regExpForNumber =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n\nconst UserSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(regExpForName)\n    .required('Requered field'),\n  number: Yup.string()\n    .matches(regExpForNumber, 'Invalid phone number')\n    .max(17, 'Must be < 17!')\n    .min(4, 'Must be > 4!')\n    .required('Requered field'),\n});\n\nexport const ContactForm = ({ onClose }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Box maxW=\"480px\" mx=\"auto\">\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={UserSchema}\n        onSubmit={(values, actions) => {\n          console.log(values);\n          dispatch(addContact(values));\n          actions.resetForm();\n          onClose();\n        }}\n      >\n        <Form>\n          <FormControl isRequired mb=\"12px\">\n            <FormLabel htmlFor=\"name\">\n              <Icon as={GrUserAdd} mr=\"5px\" />\n              Name\n              <Field\n                as={Input}\n                name=\"name\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n                placeholder=\"Enter contact name\"\n                _placeholder={{\n                  opacity: 0.6,\n                  color: 'black',\n                }}\n              />\n              <ErrorMessage\n                as={FormErrorMessage}\n                name=\"name\"\n                component=\"div\"\n              />\n            </FormLabel>\n          </FormControl>\n          <FormLabel htmlFor=\"number\">\n            <Icon as={BsTelephonePlus} mr=\"5px\" />\n            Number\n            <Field\n              as={Input}\n              type=\"tel\"\n              name=\"number\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              placeholder=\"Enter contact phone number\"\n              _placeholder={{\n                opacity: 0.6,\n                color: 'black',\n              }}\n            />\n            <ErrorMessage\n              as={FormErrorMessage}\n              name=\"number\"\n              component=\"div\"\n            />\n          </FormLabel>\n          <Flex justify=\"center\">\n            <Button type=\"submit\" mt=\"8\" colorScheme=\"teal\">\n              Add contact\n            </Button>\n          </Flex>\n        </Form>\n      </Formik>\n    </Box>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/operations';\nimport { Button, Flex, Icon, Text } from '@chakra-ui/react';\nimport { FaUserTimes } from 'react-icons/fa';\n\nexport const ContactCard = ({ contact: { name, number, id } }) => {\n  const dispatch = useDispatch();\n  return (\n    <Flex\n      as=\"li\"\n      flexDirection=\"row\"\n      alignItems=\"center\"\n      fontSize={['l', 'xl', 'xl']}\n    >\n      <Flex\n        direction={['column', 'row', 'row']}\n        alignItems=\"flex-start\"\n      >\n        <Text>{name}:</Text>\n        <Text ml={['0', '3', '3']} mb=\"2\">\n          {number}\n        </Text>\n      </Flex>\n      <Button\n        type=\"button\"\n        onClick={() => dispatch(deleteContact(id))}\n        colorScheme=\"teal\"\n        ml=\"auto\"\n        mr=\"4\"\n        mb=\"2\"\n        p=\"2\"\n      >\n        <Icon as={FaUserTimes} />\n      </Button>\n    </Flex>\n  );\n};\n\nContactCard.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    let normalizedFilter = filter.toLowerCase();\n    const visibleContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n    return visibleContacts;\n  }\n);\n","import { ContactCard } from 'components/ContactCard/ContactCard';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/selectors';\nimport { Box } from '@chakra-ui/react';\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <>\n      <Box\n        as=\"ul\"\n        paddingX=\"16px\"\n        paddingY=\"0\"\n        maxW=\"480px\"\n        maxH={['360px', '340px', '340px']}\n        mx=\"auto\"\n        overflow=\"scroll\"\n      >\n        {visibleContacts.map(contact => (\n          <ContactCard key={contact.id} contact={contact} />\n        ))}\n      </Box>\n    </>\n  );\n};\n","import {\n  FormControl,\n  FormLabel,\n  Input,\n  Box,\n  Icon,\n} from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TbListSearch } from 'react-icons/tb';\nimport { changeFilter } from '../../redux/filter/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(state => state.filter);\n  const changeValue = e => {\n    dispatch(changeFilter(e.target.value));\n  };\n  return (\n    <Box maxW={['200px', '480px', '480px']} mx=\"auto\">\n      <FormControl mb=\"4\">\n        <FormLabel fontSize={['l', 'xl', 'xl']}>\n          <Icon as={TbListSearch} mr=\"5px\" mb=\"-2px\" />\n          Find contacts by name\n          <Input\n            type=\"text\"\n            value={value}\n            onChange={changeValue}\n            mt=\"2\"\n          ></Input>\n        </FormLabel>\n      </FormControl>\n    </Box>\n  );\n};\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  Heading,\n  Flex,\n} from '@chakra-ui/react';\nimport { SmallAddIcon } from '@chakra-ui/icons';\n\nexport const AddContactModal = ({\n  children,\n  onClose,\n  isOpen,\n  onOpen,\n}) => {\n  return (\n    <>\n      <Heading as=\"h3\" mb=\"3\" textAlign=\"center\">\n        Your contacts\n      </Heading>\n      <Flex justify={'center'}>\n        <Button colorScheme=\"teal\" onClick={onOpen} mb=\"4\">\n          <SmallAddIcon mr=\"2\" color=\"white\" boxSize={7} />\n          Add contact\n        </Button>\n      </Flex>\n\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent\n          bg={theme => theme.colors.light}\n          borderRadius=\"3xl\"\n          p=\"8\"\n          mx=\"2\"\n          my=\"auto\"\n        >\n          <ModalHeader textAlign=\"center\">Add contact</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>{children}</ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Filter } from '../components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/selectors';\nimport { fetchContacts } from 'redux/operations';\nimport { MainContainer } from 'components/MainContainer/MainContainer';\nimport { AddContactModal } from 'components/AddContactModal/AddContactModal';\nimport { Spinner, useDisclosure } from '@chakra-ui/react';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <MainContainer>\n      <AddContactModal\n        isOpen={isOpen}\n        onOpen={onOpen}\n        onClose={onClose}\n      >\n        <ContactForm onClose={onClose} />\n      </AddContactModal>\n      <Filter />\n      {isLoading && !error && (\n        <div>\n          <Spinner />\n        </div>\n      )}\n      <ContactList />\n    </MainContainer>\n  );\n};\n\nexport default Contacts;\n","import { Container } from '@chakra-ui/react';\n\nexport const MainContainer = ({ children }) => {\n  return (\n    <Container\n      maxWidth={['sm', 'md', 'lg', 'xl', '2xl']}\n      position={'absolute'}\n      top={'50%'}\n      left={'50%'}\n      transform=\"translate(-50%, -50%)\"\n      paddingTop={'20px'}\n      paddingBottom={'40px'}\n      sx={{\n        backgroundColor: 'hsla(192, 40%, 84%, 0.6)',\n        backdropFilter: 'blur(6px)',\n        border: '2px solid white',\n        borderRadius: '1rem',\n      }}\n    >\n      {children}\n    </Container>\n  );\n};\n"],"names":["UserSchema","Yup","shape","name","matches","required","number","max","min","ContactForm","_ref","onClose","dispatch","useDispatch","_jsx","Box","maxW","mx","children","Formik","initialValues","validationSchema","onSubmit","values","actions","console","log","addContact","resetForm","_jsxs","Form","FormControl","isRequired","mb","FormLabel","htmlFor","Icon","as","GrUserAdd","mr","Field","Input","title","placeholder","_placeholder","opacity","color","ErrorMessage","FormErrorMessage","component","BsTelephonePlus","type","Flex","justify","Button","mt","colorScheme","ContactCard","_ref$contact","contact","id","flexDirection","alignItems","fontSize","direction","Text","ml","onClick","deleteContact","p","FaUserTimes","selectIsLoading","state","contacts","isLoading","selectError","error","selectVisibleContacts","createSelector","items","filter","normalizedFilter","toLowerCase","includes","ContactList","visibleContacts","useSelector","_Fragment","paddingX","paddingY","maxH","overflow","map","Filter","value","TbListSearch","onChange","e","changeFilter","target","AddContactModal","isOpen","onOpen","Heading","textAlign","SmallAddIcon","boxSize","Modal","ModalOverlay","ModalContent","bg","theme","colors","light","borderRadius","my","ModalHeader","ModalCloseButton","ModalBody","_useDisclosure","useDisclosure","useEffect","fetchContacts","MainContainer","Spinner","Container","maxWidth","position","top","left","transform","paddingTop","paddingBottom","sx","backgroundColor","backdropFilter","border"],"sourceRoot":""}