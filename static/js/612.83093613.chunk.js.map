{"version":3,"file":"static/js/612.83093613.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactCard/ContactCard.styled.js","components/ContactCard/ContactCard.jsx","components/ContactList/ContactList.styled.js","redux/selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","Pages/Contacts.jsx"],"sourcesContent":["import styled from \"styled-components\";\nimport { Form as FormikForm, ErrorMessage as FormikErrorMessage, Field as FormikField } from 'formik';\n\nexport const Form = styled(FormikForm)`\n    padding: 16px;\n    margin-bottom: 25px;\n    text-align: start;\n    border: 2px solid ${p => p.theme.colors.main};\n    border-radius: 10px;\n\n    button {\n        padding: 10px;\n        background-color: ${p => p.theme.colors.extraLight};\n        border: none;\n        border-radius: 10px;\n        \n        :hover, :focus {\n            color: ${p => p.theme.colors.text};\n            background-color: ${p => p.theme.colors.midle};\n        }\n    }\n`;\n\nexport const FormField = styled.label`\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const Field = styled(FormikField)`\n    margin-bottom: 10px;\n    margin-top: 10px;\n    padding: 10px;\n    border: none;\n    border-radius: 10px;\n    background-color: ${p=>p.theme.colors.extraLight};\n`;\n\nexport const ErrorMessage = styled(FormikErrorMessage)`\n    margin-bottom: 10px;\n    color: ${p=>p.theme.colors.error};\n`;","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, ErrorMessage, FormField, Field } from './ContactForm.styled';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/operations';\n\nconst regExpForName =\n  /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\nconst regExpForNumber =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n\nconst UserSchema = Yup.object().shape({\n  name: Yup.string().matches(regExpForName).required('Requered field'),\n  number: Yup.string()\n    .matches(regExpForNumber, 'Invalid phone number')\n    .max(17, 'Must be < 17!')\n    .min(4, 'Must be > 4!')\n    .required('Requered field'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={UserSchema}\n      onSubmit={(values, actions) => {\n        dispatch(addContact(values));\n        actions.resetForm();\n      }}\n    >\n      <Form>\n        <FormField>\n          Name\n          <Field\n            name=\"name\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <ErrorMessage name=\"name\" component=\"div\" />\n        </FormField>\n        <FormField>\n          Number\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <ErrorMessage name=\"number\" component=\"div\" />\n        </FormField>\n        <button type=\"submit\">Add contact</button>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Card = styled.li`\n    display: flex;\n    align-items: center;\n    margin-bottom: 10px;\n    text-align: center;\n\n    p {\n        margin-left: 5px;\n    }\n\n    button {\n        margin-left: auto;\n        margin-right: 16px;\n        padding: 8px;\n        background-color: ${p => p.theme.colors.extraLight};\n        border: none;\n        border-radius: 10px;\n        \n        :hover, :focus {\n            color: ${p => p.theme.colors.text};\n            background-color: ${p => p.theme.colors.midle};\n        }\n    }\n    \n`;","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { Card } from './ContactCard.styled';\nimport { deleteContact } from '../../redux/operations';\n\nexport const ContactCard = ({ contact: { name, number, id } }) => {\n  const dispatch = useDispatch();\n  return (\n    <Card>\n      <p>{name}</p> :<p>{number}</p>\n      <button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n        Delete\n      </button>\n    </Card>\n  );\n};\n\nContactCard.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","import styled from \"styled-components\";\n\nexport const List = styled.ul`\n    padding: 0 16px;\n`;","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    let normalizedFilter = filter.toLowerCase();\n    const visibleContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n    return visibleContacts;\n  }\n);\n","import { ContactCard } from 'components/ContactCard/ContactCard';\nimport { List } from './ContactList.styled';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/selectors';\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <List>\n      {visibleContacts.map(contact => (\n        <ContactCard key={contact.id} contact={contact} />\n      ))}\n    </List>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const FilterLable = styled.label`\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 25px;\n    padding: 0 16px;\n    text-align: start;\n\n    input {\n        margin-top: 10px;\n        padding: 10px;\n        border: none;\n        border-radius: 10px;\n        background-color: ${p=>p.theme.colors.extraLight};\n    }\n`;","import { FilterLable } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from '../../redux/filter/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(state => state.filter);\n  const changeValue = e => {\n    dispatch(changeFilter(e.target.value));\n  };\n  return (\n    <FilterLable>\n      Find contacts by name\n      <input type=\"text\" value={value} onChange={changeValue}></input>\n    </FilterLable>\n  );\n};\n","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Filter } from '../components/Filter/Filter';\nimport { useEffect } from 'react';\n\n// import { PersistGate } from 'redux-persist/integration/react';\n// import { persistor } from 'redux/store';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/selectors';\nimport { fetchContacts } from 'redux/operations';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <div>\n      Contacts Page\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !error && <div>LOADING...</div>}\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["Form","styled","FormikForm","_templateObject","_taggedTemplateLiteral","p","theme","colors","main","extraLight","text","midle","FormField","_templateObject2","Field","FormikField","_templateObject3","ErrorMessage","FormikErrorMessage","_templateObject4","error","UserSchema","Yup","shape","name","matches","required","number","max","min","ContactForm","dispatch","useDispatch","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","addContact","resetForm","children","_jsxs","title","component","type","Card","ContactCard","_ref","_ref$contact","contact","id","onClick","deleteContact","List","selectIsLoading","state","contacts","isLoading","selectError","selectVisibleContacts","createSelector","items","filter","normalizedFilter","toLowerCase","includes","ContactList","visibleContacts","useSelector","map","FilterLable","Filter","value","onChange","e","changeFilter","target","useEffect","fetchContacts"],"sourceRoot":""}